#include <SDL2/SDL.h>
#include <glm/glm.hpp>
#include <glm/gtc/noise.hpp> 
#include <algorithm>
#include <string>
#include <vector>
#include <iostream>
#include <array>
#include <cstdlib>
#include <cmath>
#include <tuple>
#include <thread>
#include <mutex>
#include "shs_renderer.hpp"

#define FRAMES_PER_SECOND  60
#define WINDOW_WIDTH       640
#define WINDOW_HEIGHT      460
#define CANVAS_WIDTH       640
#define CANVAS_HEIGHT      360


/*
* Mongolian flag by Sharavsambuu - https://www.shadertoy.com/view/MsX3Wn
*/

constexpr float PI = 3.1415926535f;
const glm::vec3 MONGOLIAN_RED   (0.855f, 0.125f, 0.192f);
const glm::vec3 MONGOLIAN_BLUE  (0.0f  , 0.4f  , 0.698f);
const glm::vec3 MONGOLIAN_YELLOW(1.0f  , 0.827f, 0.0f  );

// Soyombo data
const std::vector<glm::vec3> positions = {
    glm::vec3(0.11369219140352504, 0.7428709688492116, 0), glm::vec3(0.095009798870189, 0.7114055291300527, 0), glm::vec3(0.05973449191579793, 0.6851026423160318, 0), glm::vec3(0.020403139214037632, 0.6713366688704161, 0), glm::vec3(-0.021263512554389342, 0.6713366688704161, 0), glm::vec3(-0.061578149073693335, 0.6851026423160318, 0), glm::vec3(-0.09697636650527736, 0.7114055291300486, 0), glm::vec3(-0.11565875903861329, 0.7428709688492116, 0), glm::vec3(-0.11688786381054343, 0.7652409885613711, 0), glm::vec3(-0.10803830945264736, 0.7888398001824302, 0), glm::vec3(-0.09169121598597833, 0.8266962271578713, 0), glm::vec3(-0.08185837781053823, 0.8581613093192751, 0), glm::vec3(-0.08062927303860822, 0.8720501932420925, 0), glm::vec3(-0.08062927303860822, 0.8801622847368288, 0), glm::vec3(-0.07116516629474728, 0.8713127303789348, 0), glm::vec3(-0.06034904430176331, 0.8506637702105112, 0), glm::vec3(-0.06010322334737716, 0.8384956329684048, 0), glm::vec3(-0.06895277770527311, 0.814896821347354, 0), glm::vec3(-0.07780233206316924, 0.7888398001824302, 0), glm::vec3(-0.07485248061053734, 0.7809735296420771, 0), glm::vec3(-0.06600292625264127, 0.7751967372140081, 0), glm::vec3(-0.057153371894745154, 0.7722468857613767, 0), glm::vec3(-0.04682889181053326, 0.7738447219648861, 0), glm::vec3(-0.037979337452637256, 0.7836775601403252, 0), glm::vec3(-0.033431649796496064, 0.8016224898104967, 0), glm::vec3(-0.029498514526320078, 0.8232547337964694, 0), glm::vec3(-0.026179931642109078, 0.8402163796491078, 0), glm::vec3(-0.021263512554389227, 0.8539823530947235, 0), glm::vec3(-0.0133972420140372, 0.8709439989473498, 0), glm::vec3(-0.008480822926317235, 0.8866765400280598, 0), glm::vec3(-0.008480822926317235, 0.8963864677263054, 0), glm::vec3(-0.0133972420140372, 0.9052360220841994, 0), glm::vec3(-0.02200097541754717, 0.9187561745754319, 0), glm::vec3(-0.02691739450526702, 0.9354719994736749, 0), glm::vec3(-0.02531955830175806, 0.9572271539368372, 0), glm::vec3(-0.007620449585965872, 0.9847591008280686, 0), glm::vec3(0.0027040304982458487, 0.9904129827789522, 0), glm::vec3(-0.003195672407017983, 0.9727138740631559, 0), glm::vec3(-0.0028269409754389254, 0.9572271539368372, 0), glm::vec3(0.006022613382457196, 0.9395280452210409, 0), glm::vec3(0.022492617326319016, 0.9198623688701626, 0), glm::vec3(0.03330873931930287, 0.9041298277894606, 0), glm::vec3(0.03416911265965406, 0.8955260943859539, 0), glm::vec3(0.02433627448421379, 0.8660275798596281, 0), glm::vec3(0.014257615354388048, 0.8294002576561154, 0), glm::vec3(0.020157318259652054, 0.8077680136701466, 0), glm::vec3(0.03281709741053102, 0.789208531614003, 0), glm::vec3(0.045599787038603304, 0.7803589772561088, 0), glm::vec3(0.05764501380351689, 0.7770403943718965, 0), glm::vec3(0.06452800052632493, 0.7770403943718965, 0), glm::vec3(0.06846113579650097, 0.7802360667789193, 0), glm::vec3(0.06944441961404502, 0.7881023373192682, 0), glm::vec3(0.06833822531930801, 0.7949853240420761, 0), glm::vec3(0.06440509004913232, 0.8008850269473429, 0), glm::vec3(0.05850538714386808, 0.8099804022596242, 0), glm::vec3(0.05653881950877977, 0.8178466727999771, 0), glm::vec3(0.058259566189482276, 0.8271878690666459, 0), glm::vec3(0.062192701459658085, 0.8409538425122616, 0), glm::vec3(0.06833822531930824, 0.8557030997754225, 0), glm::vec3(0.07227136058948405, 0.8655359379508616, 0), glm::vec3(0.07165680820351913, 0.8768437018526206, 0), glm::vec3(0.06280725384562301, 0.8925762429333225, 0), glm::vec3(0.07141098724913308, 0.8949115419999816, 0), glm::vec3(0.09009337978246915, 0.8801622847368248, 0), glm::vec3(0.0919370369403645, 0.8691003417894532, 0), glm::vec3(0.08800390167018879, 0.8543510845262963, 0), glm::vec3(0.08554569212632841, 0.8345624976982202, 0), glm::vec3(0.09341196266668014, 0.8148968213473378, 0), glm::vec3(0.10717793611229612, 0.7877336058876873, 0), glm::vec3(0.11504420665264808, 0.7670846457192677, 0), glm::vec3(0.18338243197195608, 0.4172807125124858, 0), glm::vec3(0.15585048508072416, 0.35336726437212485, 0), glm::vec3(0.10287606941054118, 0.3022365058598344, 0), glm::vec3(0.036996053635092986, 0.2756878427861481, 0), glm::vec3(-0.03699605363509328, 0.2756878427861481, 0), glm::vec3(-0.10287606941054131, 0.3022365058598344, 0), glm::vec3(-0.15499011174037353, 0.35336726437212485, 0), glm::vec3(-0.1815387748140616, 0.4172807125124858, 0), glm::vec3(-0.1815387748140616, 0.48844587880723145, 0), glm::vec3(-0.15499011174037353, 0.5513760431300472, 0), glm::vec3(-0.10287606941054131, 0.602383891165144, 0), glm::vec3(-0.03699605363509328, 0.6289325542388384, 0), glm::vec3(0.036996053635092986, 0.6289325542388384, 0), glm::vec3(0.10287606941054118, 0.602383891165144, 0), glm::vec3(0.15585048508072416, 0.5513760431300472, 0), glm::vec3(0.18338243197195608, 0.48844587880723145, 0), glm::vec3(0.2659782726456526, 0.31243807546685454, 0), glm::vec3(0.2227137846737164, 0.22984223479316035, 0), glm::vec3(0.1415928697263361, 0.16359348758613224, 0), glm::vec3(0.049164190877199886, 0.129178553972093, 0), glm::vec3(-0.04904128040000738, 0.12905564349489929, 0), glm::vec3(-0.14048667543159973, 0.16248729329139755, 0), glm::vec3(-0.22160759037897979, 0.22873604049842566, 0), glm::vec3(-0.2658553621684598, 0.31231516498966494, 0), glm::vec3(-0.250860283950914, 0.32731024320720903, 0), glm::vec3(-0.19284653871581778, 0.2751962008773776, 0), glm::vec3(-0.11762532667370154, 0.23918343105982898, 0), glm::vec3(-0.039945905087725275, 0.2214843223440368, 0), glm::vec3(0.040068815564918064, 0.2214843223440368, 0), glm::vec3(0.11873152096843832, 0.23918343105982898, 0), glm::vec3(0.19395273301055413, 0.2751962008773776, 0), glm::vec3(0.25098319442810624, 0.32731024320720903, 0), glm::vec3(0.2007742644947657, 0.06372872486681957, 0), glm::vec3(0.037180419350882433, -0.03226435782090942, 0), glm::vec3(-0.03718041935088272, -0.03226435782090942, 0), glm::vec3(-0.20077426449476615, 0.06372872486681957, 0), glm::vec3(-0.21750545320266332, 0.08554533456857871, 0), glm::vec3(-0.08737398547457423, 0.08554533456857871, 0), glm::vec3(0.08737398547457383, 0.08554533456857871, 0), glm::vec3(0.2175054532026629, 0.08554533456857871, 0), glm::vec3(0.48217780202814, -1, 0), glm::vec3(0.3280480636281176, -1, 0), glm::vec3(0.29301857762811273, -0.9878088170434229, 0), glm::vec3(0.29301857762811273, -0.8998202791828795, 0), glm::vec3(0.29301857762811273, -0.6565266714841562, 0), glm::vec3(0.29301857762811273, -0.25792799394726096, 0), glm::vec3(0.29301857762811273, -0.014634386248537634, 0), glm::vec3(0.29301857762811273, 0.07335415161199754, 0), glm::vec3(0.3280480636281176, 0.08554533456857871, 0), glm::vec3(0.48217780202814, 0.08554533456857871, 0), glm::vec3(0.517207288028145, 0.07335415161199754, 0), glm::vec3(0.517207288028145, -0.014634386248537634, 0), glm::vec3(0.517207288028145, -0.25792799394726096, 0), glm::vec3(0.517207288028145, -0.6565266714841562, 0), glm::vec3(0.517207288028145, -0.8998202791828795, 0), glm::vec3(0.517207288028145, -0.9878088170434229, 0), glm::vec3(0.21570788747371517, -0.16814189035777072, 0), glm::vec3(0.08665188642106494, -0.16814189035777072, 0), glm::vec3(-0.08665188642106529, -0.16814189035777072, 0), glm::vec3(-0.21570788747371555, -0.16814189035777072, 0), glm::vec3(-0.23598811621056057, -0.1558508426384706, 0), glm::vec3(-0.23598811621056057, -0.10177023267354901, 0), glm::vec3(-0.21570788747371555, -0.08947918495424889, 0), glm::vec3(-0.08665188642106529, -0.08947918495424889, 0), glm::vec3(0.08665188642106494, -0.08947918495424889, 0), glm::vec3(0.21570788747371517, -0.08947918495424889, 0), glm::vec3(0.2359881162105603, -0.10177023267354901, 0), glm::vec3(0.2359881162105603, -0.1558508426384706, 0), glm::vec3(0.22787602471582227, -0.4687809175718467, 0), glm::vec3(0.19444437491932645, -0.5454770553402863, 0), glm::vec3(0.13077674773335224, -0.6029991586666059, 0), glm::vec3(0.050147474694744266, -0.6324976731929277, 0), glm::vec3(-0.050270385171937174, -0.6300394636490709, 0), glm::vec3(-0.11221726567720922, -0.5808752727718707, 0), glm::vec3(-0.11578166951580632, -0.5081122702736116, 0), glm::vec3(-0.08235001971931014, -0.46484778230167434, 0), glm::vec3(-0.02261552780351198, -0.4424780754525437, 0), glm::vec3(0.038348068884216026, -0.42477896673675564, 0), glm::vec3(0.09808256080001453, -0.3981073931858634, 0), glm::vec3(0.13151421059651036, -0.3440267832209498, 0), glm::vec3(0.13421824109475644, -0.28822542657532524, 0), glm::vec3(0.12241883528422855, -0.2557770605963803, 0), glm::vec3(0.13495570395791456, -0.2508606415086667, 0), glm::vec3(0.1762536242947627, -0.28527557512270185, 0), glm::vec3(0.21103728934038157, -0.34083111081393125, 0), glm::vec3(0.22971968187371797, -0.39687828841394324, 0), glm::vec3(0.10816121992984028, -0.344641335606918, 0), glm::vec3(0.07669613776843229, -0.3898723912139457, 0), glm::vec3(0.017699108715792014, -0.41076717233676074, 0), glm::vec3(-0.04523105560702419, -0.4264997134174666, 0), glm::vec3(-0.10508845800001508, -0.45120471933326045, 0), glm::vec3(-0.13753682397896727, -0.5092184645683464, 0), glm::vec3(-0.1411012278175642, -0.5644052688280028, 0), glm::vec3(-0.13716809254738832, -0.5880040804490618, 0), glm::vec3(-0.1543755593544085, -0.5843167661332604, 0), glm::vec3(-0.18977377678599247, -0.5489185487016841, 0), glm::vec3(-0.21570788747371544, -0.5004918206876379, 0), glm::vec3(-0.22849057710178744, -0.44936106217535565, 0), glm::vec3(-0.22590945708073448, -0.37979373208412337, 0), glm::vec3(-0.1924778072842383, -0.3050641619507821, 0), glm::vec3(-0.12819562771229925, -0.24938571578234292, 0), glm::vec3(-0.04854963849123507, -0.22087048507357032, 0), glm::vec3(0.04682889181053326, -0.2232057841402335, 0), glm::vec3(0.10484263704562916, -0.27040340738234336, 0), glm::vec3(0.2157078874737155, -0.7620453161543526, 0), glm::vec3(0.08665188642106518, -0.7620453161543526, 0), glm::vec3(-0.08665188642106494, -0.7620453161543526, 0), glm::vec3(-0.21570788747371533, -0.7620453161543526, 0), glm::vec3(-0.23598811621056034, -0.7497542684350524, 0), glm::vec3(-0.23598811621056034, -0.6956736584701306, 0), glm::vec3(-0.21570788747371533, -0.6833826107508307, 0), glm::vec3(-0.08665188642106494, -0.6833826107508307, 0), glm::vec3(0.08665188642106518, -0.6833826107508307, 0), glm::vec3(0.2157078874737155, -0.6833826107508307, 0), glm::vec3(0.23598811621056062, -0.6956736584701306, 0), glm::vec3(0.23598811621056062, -0.7497542684350524, 0), glm::vec3(-0.3280480636281175, -1, 0), glm::vec3(-0.4821778020281399, -1, 0), glm::vec3(-0.517207288028145, -0.9878088170434229, 0), glm::vec3(-0.517207288028145, -0.8998202791828795, 0), glm::vec3(-0.517207288028145, -0.6565266714841562, 0), glm::vec3(-0.517207288028145, -0.25792799394726096, 0), glm::vec3(-0.517207288028145, -0.014634386248537634, 0), glm::vec3(-0.517207288028145, 0.07335415161199754, 0), glm::vec3(-0.4821778020281399, 0.08554533456857871, 0), glm::vec3(-0.3280480636281175, 0.08554533456857871, 0), glm::vec3(-0.29301857762811256, 0.07335415161199754, 0), glm::vec3(-0.29301857762811256, -0.014634386248537634, 0), glm::vec3(-0.29301857762811256, -0.25792799394726096, 0), glm::vec3(-0.29301857762811256, -0.6565266714841562, 0), glm::vec3(-0.29301857762811256, -0.8998202791828795, 0), glm::vec3(-0.29301857762811256, -0.9878088170434229, 0), glm::vec3(0.20077426449476593, -0.8369592520034761, 0), glm::vec3(0.037180419350882773, -0.9329523346912132, 0), glm::vec3(-0.03718041935088249, -0.9329523346912132, 0), glm::vec3(-0.20077426449476593, -0.8369592520034761, 0), glm::vec3(-0.2175054532026631, -0.815142642301725, 0), glm::vec3(-0.08737398547457395, -0.815142642301725, 0), glm::vec3(0.08737398547457406, -0.815142642301725, 0), glm::vec3(0.21750545320266315, -0.815142642301725, 0), glm::vec3(0.05518680425965708, -0.2921585618455056, 0), glm::vec3(0.024705005915793016, -0.2675764664069056, 0), glm::vec3(-0.028638141185969003, -0.2675764664069056, 0), glm::vec3(-0.05911993952983301, -0.2921585618455056, 0), glm::vec3(-0.05911993952983301, -0.3360376022034033, 0), glm::vec3(-0.028638141185969003, -0.3616029814595525, 0), glm::vec3(0.024705005915793016, -0.3616029814595525, 0), glm::vec3(0.05518680425965708, -0.3360376022034033, 0), glm::vec3(0.05518680425965708, -0.5143807046104472, 0), glm::vec3(0.024705005915793016, -0.48979860917184714, 0), glm::vec3(-0.028638141185969003, -0.48979860917184714, 0), glm::vec3(-0.05911993952983301, -0.5143807046104472, 0), glm::vec3(-0.05911993952983301, -0.5582597449683446, 0), glm::vec3(-0.028638141185969003, -0.5838251242244941, 0), glm::vec3(0.024705005915793016, -0.5838251242244941, 0), glm::vec3(0.05518680425965708, -0.5582597449683446, 0), glm::vec3(-0.517207288028145, 0.08554533456857871, 0), glm::vec3(-0.517207288028145, -1, 0), glm::vec3(-0.29301857762811256, -1, 0), glm::vec3(-0.29301857762811256, 0.08554533456857871, 0), glm::vec3(-0.2713863336421449, 0.3588982358458106, 0), glm::vec3(-0.23795468384564872, 0.08554533456857871, 0), glm::vec3(-0.23795468384564847, -0.815142642301725, 0), glm::vec3(-0.23598811621056057, -0.08947918495424889, 0), glm::vec3(-0.23598811621056057, -0.16814189035777072, 0), glm::vec3(-0.23598811621056034, -0.6833826107508307, 0), glm::vec3(-0.23598811621056034, -0.7620453161543526, 0), glm::vec3(-0.2300884133052965, -0.42379568291921443, 0), glm::vec3(-0.20452303404915242, -0.5260571999437871, 0), glm::vec3(-0.1848573576982725, 0.4532934823300343, 0), glm::vec3(-0.18289079006318465, 0.19173998686333193, 0), glm::vec3(-0.16322511371230433, -0.27433654265252394, 0), glm::vec3(-0.1553588431719526, 0.25467015118614766, 0), glm::vec3(-0.14159286972633628, -0.5496560115648461, 0), glm::vec3(-0.1337265991859843, -0.596853634806956, 0), glm::vec3(-0.1317600315508964, 0.579153810975666, 0), glm::vec3(-0.1317600315508964, 0.32546658604931245, 0), glm::vec3(-0.11996062574036823, -0.5378566057543206, 0), glm::vec3(-0.11799405810528031, 0.7600787485192663, 0), glm::vec3(-0.10029494938948824, 0.8072763717613801, 0), glm::vec3(-0.08062927303860833, 0.6971478690809445, 0), glm::vec3(-0.08062927303860822, 0.8820059418947255, 0), glm::vec3(-0.08062927303860822, 0.870206536084196, 0), glm::vec3(-0.07669613776843223, 0.7935103983157644, 0), glm::vec3(-0.07669613776843205, -0.43362852109465777, 0), glm::vec3(-0.07079643486316822, 0.7777778572350584, 0), glm::vec3(-0.06293016432281597, -0.5358900381192222, 0), glm::vec3(-0.06293016432281597, -0.31366789535428063, 0), glm::vec3(-0.058997029052640156, 0.8407080215578784, 0), glm::vec3(-0.05309732614737615, 0.7718781543297958, 0), glm::vec3(-0.05309732614737604, -0.45132762981044583, 0), glm::vec3(-0.035398217431584084, 0.7915438306806741, 0), glm::vec3(-0.027531946891232117, 0.9449361062175372, 0), glm::vec3(-0.027531946891232117, 0.8348083186526116, 0), glm::vec3(-0.01769910871579213, 0.911504456421043, 0), glm::vec3(-0.01769910871579213, 0.862340265543843, 0), glm::vec3(-0.00786627054035214, 0.8938053477052509, 0), glm::vec3(-0.003933135270175927, -0.21730608123497075, 0), glm::vec3(-0.003933135270175927, 0.9646017825684156, 0), glm::vec3(-0.0019665676350879057, -0.5870207966315126, 0), glm::vec3(-0.0019665676350879057, -0.48672584724202217, 0), glm::vec3(-0.0019665676350879057, -0.36479865386657107, 0), glm::vec3(-0.0019665676350879057, -0.2645037044770806, 0), glm::vec3(-1.722646319018345e-16, -0.054080967522668555, 0), glm::vec3(-1.722646319018345e-16, 0.21927193375456333, 0), glm::vec3(-1.722646319018345e-16, 0.12487668727033963, 0), glm::vec3(-1.722646319018345e-16, 0.6322511371230426, 0), glm::vec3(-1.722646319018345e-16, 0.27236925990193583, 0), glm::vec3(-1.722646319018345e-16, 0.6696159221897131, 0), glm::vec3(1.1484308793455633e-16, -0.9547689443929723, 0), glm::vec3(0.007866270540352082, 1, 0), glm::vec3(0.003933135270176041, -0.6361849875087209, 0), glm::vec3(0.013765973445615972, 0.9292035651368312, 0), glm::vec3(0.01573254108070405, 0.838741453922784, 0), glm::vec3(0.027531946891231944, 0.7954769659508466, 0), glm::vec3(0.03539821743158391, 0.8977384829754234, 0), glm::vec3(0.049164190877200115, -0.4021634389332458, 0), glm::vec3(0.05309732614737615, 0.7777778572350544, 0), glm::vec3(0.05506389378246412, 0.8997050506105135, 0), glm::vec3(0.058997029052640156, -0.5358900381192222, 0), glm::vec3(0.058997029052640156, -0.31366789535428063, 0), glm::vec3(0.05703046141755219, 0.8210423452069959, 0), glm::vec3(0.06096359668772812, 0.8053098041262898, 0), glm::vec3(0.06489673195790416, 0.8485742920982273, 0), glm::vec3(0.06686329959299213, 0.7777778572350544, 0), glm::vec3(0.06882986722808009, 0.7935103983157604, 0), glm::vec3(0.06882986722808032, -0.4159294123788615, 0), glm::vec3(0.07276300249825612, 0.8682399684491057, 0), glm::vec3(0.07866270540352002, 0.6971478690809445, 0), glm::vec3(0.08456240830878425, 0.8407080215578702, 0), glm::vec3(0.09242867884913633, 0.870206536084192, 0), glm::vec3(0.1002949493894883, 0.8013766688561093, 0), glm::vec3(0.11209435520001619, -0.3117013277191987, 0), glm::vec3(0.11209435520001643, -0.24287146049111197, 0), glm::vec3(0.11602749047019201, 0.7600787485192663, 0), glm::vec3(0.13176003155089616, 0.579153810975666, 0), glm::vec3(0.13176003155089616, 0.32546658604931245, 0), glm::vec3(0.13569316682107244, -0.3077681924490181, 0), glm::vec3(0.15732541080704004, 0.25467015118614766, 0), glm::vec3(0.16519168134739234, -0.5771879584560775, 0), glm::vec3(0.18682392533336029, 0.4532934823300343, 0), glm::vec3(0.18485735769827222, 0.19370655449841812, 0), glm::vec3(0.19469019587371272, -0.31170132771919046, 0), glm::vec3(0.23795468384564836, 0.08554533456857871, 0), glm::vec3(0.2379546838456486, -0.815142642301725, 0), glm::vec3(0.23205498094038438, -0.42379568291920644, 0), glm::vec3(0.2359881162105603, -0.16814189035777072, 0), glm::vec3(0.2359881162105603, -0.08947918495424889, 0), glm::vec3(0.23598811621056062, -0.7620453161543526, 0), glm::vec3(0.23598811621056062, -0.6833826107508307, 0), glm::vec3(0.2713863336421442, 0.3588982358458106, 0), glm::vec3(0.29301857762811273, 0.08554533456857871, 0), glm::vec3(0.29301857762811273, -1, 0), glm::vec3(0.517207288028145, -1, 0), glm::vec3(0.517207288028145, 0.08554533456857871, 0)
};
const std::vector<glm::ivec3> triangles = {
    glm::ivec3(0, 1, 294), glm::ivec3(0, 294, 304), glm::ivec3(1, 48, 49), glm::ivec3(1, 49, 294), glm::ivec3(1, 298, 48), glm::ivec3(2, 3, 47), glm::ivec3(2, 47, 287), glm::ivec3(2, 287, 298), glm::ivec3(3, 278, 47), glm::ivec3(4, 5, 22), glm::ivec3(4, 22, 278), glm::ivec3(5, 250, 259), glm::ivec3(5, 259, 22), glm::ivec3(6, 7, 20), glm::ivec3(6, 20, 21), glm::ivec3(6, 21, 250), glm::ivec3(7, 248, 255), glm::ivec3(7, 255, 20), glm::ivec3(8, 9, 19), glm::ivec3(8, 19, 255), glm::ivec3(8, 255, 248), glm::ivec3(9, 18, 19), glm::ivec3(9, 249, 18), glm::ivec3(10, 11, 16), glm::ivec3(10, 16, 17), glm::ivec3(10, 17, 249), glm::ivec3(11, 14, 15), glm::ivec3(11, 15, 16), glm::ivec3(11, 252, 14), glm::ivec3(12, 13, 14), glm::ivec3(12, 14, 252), glm::ivec3(13, 251, 14), glm::ivec3(15, 258, 16), glm::ivec3(17, 253, 249), glm::ivec3(18, 249, 253), glm::ivec3(21, 259, 250), glm::ivec3(22, 23, 46), glm::ivec3(22, 46, 278), glm::ivec3(23, 261, 284), glm::ivec3(23, 284, 46), glm::ivec3(24, 25, 45), glm::ivec3(24, 45, 261), glm::ivec3(25, 44, 45), glm::ivec3(25, 263, 44), glm::ivec3(26, 27, 283), glm::ivec3(26, 44, 263), glm::ivec3(26, 283, 44), glm::ivec3(27, 265, 283), glm::ivec3(28, 29, 43), glm::ivec3(28, 43, 283), glm::ivec3(28, 283, 265), glm::ivec3(29, 42, 43), glm::ivec3(29, 266, 42), glm::ivec3(30, 31, 40), glm::ivec3(30, 40, 41), glm::ivec3(30, 41, 266), glm::ivec3(31, 264, 282), glm::ivec3(31, 282, 40), glm::ivec3(32, 33, 39), glm::ivec3(32, 39, 264), glm::ivec3(33, 262, 39), glm::ivec3(34, 35, 37), glm::ivec3(34, 37, 268), glm::ivec3(34, 38, 262), glm::ivec3(34, 268, 38), glm::ivec3(35, 36, 37), glm::ivec3(35, 280, 36), glm::ivec3(38, 39, 262), glm::ivec3(39, 282, 264), glm::ivec3(41, 42, 266), glm::ivec3(41, 285, 42), glm::ivec3(45, 284, 261), glm::ivec3(46, 47, 278), glm::ivec3(48, 298, 287), glm::ivec3(50, 51, 68), glm::ivec3(50, 68, 69), glm::ivec3(50, 69, 294), glm::ivec3(51, 295, 301), glm::ivec3(51, 301, 68), glm::ivec3(52, 53, 67), glm::ivec3(52, 67, 301), glm::ivec3(52, 301, 295), glm::ivec3(53, 292, 67), glm::ivec3(54, 55, 291), glm::ivec3(54, 67, 292), glm::ivec3(54, 291, 67), glm::ivec3(56, 57, 66), glm::ivec3(56, 66, 291), glm::ivec3(57, 293, 299), glm::ivec3(57, 299, 66), glm::ivec3(58, 59, 65), glm::ivec3(58, 65, 299), glm::ivec3(58, 299, 293), glm::ivec3(59, 64, 65), glm::ivec3(59, 297, 64), glm::ivec3(60, 61, 62), glm::ivec3(60, 62, 63), glm::ivec3(60, 63, 297), glm::ivec3(61, 288, 62), glm::ivec3(63, 64, 297), glm::ivec3(63, 300, 64), glm::ivec3(66, 67, 291), glm::ivec3(69, 304, 294), glm::ivec3(70, 71, 310), glm::ivec3(71, 305, 310), glm::ivec3(71, 306, 305), glm::ivec3(72, 73, 83), glm::ivec3(72, 83, 305), glm::ivec3(72, 305, 306), glm::ivec3(73, 82, 83), glm::ivec3(73, 276, 82), glm::ivec3(73, 277, 276), glm::ivec3(74, 75, 80), glm::ivec3(74, 80, 81), glm::ivec3(74, 81, 276), glm::ivec3(74, 276, 277), glm::ivec3(75, 246, 80), glm::ivec3(76, 77, 239), glm::ivec3(76, 239, 246), glm::ivec3(78, 79, 239), glm::ivec3(79, 245, 239), glm::ivec3(80, 246, 245), glm::ivec3(84, 85, 310), glm::ivec3(84, 310, 305), glm::ivec3(86, 87, 100), glm::ivec3(86, 100, 101), glm::ivec3(86, 101, 320), glm::ivec3(87, 308, 100), glm::ivec3(87, 311, 308), glm::ivec3(88, 89, 98), glm::ivec3(88, 98, 99), glm::ivec3(88, 99, 311), glm::ivec3(89, 274, 98), glm::ivec3(89, 275, 274), glm::ivec3(90, 91, 97), glm::ivec3(90, 97, 274), glm::ivec3(90, 274, 275), glm::ivec3(91, 96, 97), glm::ivec3(91, 240, 96), glm::ivec3(92, 93, 95), glm::ivec3(92, 95, 242), glm::ivec3(92, 242, 240), glm::ivec3(93, 94, 95), glm::ivec3(93, 230, 94), glm::ivec3(96, 240, 242), glm::ivec3(99, 308, 311), glm::ivec3(102, 103, 108), glm::ivec3(102, 108, 109), glm::ivec3(102, 109, 313), glm::ivec3(103, 104, 108), glm::ivec3(103, 273, 104), glm::ivec3(104, 105, 107), glm::ivec3(104, 107, 108), glm::ivec3(105, 106, 107), glm::ivec3(105, 231, 106), glm::ivec3(110, 111, 124), glm::ivec3(110, 124, 125), glm::ivec3(110, 125, 323), glm::ivec3(111, 112, 113), glm::ivec3(111, 113, 124), glm::ivec3(111, 322, 112), glm::ivec3(113, 114, 124), glm::ivec3(114, 115, 122), glm::ivec3(114, 122, 123), glm::ivec3(114, 123, 124), glm::ivec3(115, 116, 121), glm::ivec3(115, 121, 122), glm::ivec3(116, 117, 118), glm::ivec3(116, 118, 119), glm::ivec3(116, 119, 121), glm::ivec3(117, 321, 118), glm::ivec3(119, 120, 121), glm::ivec3(119, 324, 120), glm::ivec3(126, 127, 135), glm::ivec3(126, 135, 136), glm::ivec3(126, 136, 137), glm::ivec3(126, 137, 316), glm::ivec3(127, 128, 134), glm::ivec3(127, 134, 135), glm::ivec3(128, 129, 133), glm::ivec3(128, 133, 134), glm::ivec3(129, 130, 132), glm::ivec3(129, 132, 133), glm::ivec3(129, 234, 130), glm::ivec3(130, 131, 132), glm::ivec3(131, 233, 132), glm::ivec3(135, 317, 136), glm::ivec3(138, 139, 148), glm::ivec3(138, 148, 315), glm::ivec3(139, 218, 148), glm::ivec3(139, 289, 218), glm::ivec3(139, 309, 289), glm::ivec3(140, 141, 225), glm::ivec3(140, 225, 289), glm::ivec3(140, 289, 309), glm::ivec3(141, 224, 225), glm::ivec3(141, 281, 224), glm::ivec3(142, 143, 222), glm::ivec3(142, 222, 223), glm::ivec3(142, 223, 281), glm::ivec3(143, 247, 222), glm::ivec3(144, 145, 221), glm::ivec3(144, 221, 256), glm::ivec3(144, 256, 247), glm::ivec3(145, 220, 221), glm::ivec3(145, 260, 220), glm::ivec3(146, 147, 270), glm::ivec3(146, 220, 260), glm::ivec3(146, 270, 220), glm::ivec3(147, 219, 270), glm::ivec3(147, 296, 219), glm::ivec3(148, 149, 155), glm::ivec3(148, 155, 315), glm::ivec3(148, 218, 296), glm::ivec3(149, 154, 155), glm::ivec3(149, 307, 312), glm::ivec3(149, 312, 154), glm::ivec3(150, 151, 152), glm::ivec3(150, 152, 153), glm::ivec3(150, 153, 307), glm::ivec3(151, 303, 152), glm::ivec3(153, 312, 307), glm::ivec3(156, 157, 217), glm::ivec3(156, 217, 290), glm::ivec3(156, 290, 302), glm::ivec3(157, 216, 217), glm::ivec3(157, 286, 216), glm::ivec3(158, 159, 271), glm::ivec3(158, 216, 286), glm::ivec3(158, 271, 216), glm::ivec3(159, 215, 271), glm::ivec3(159, 254, 215), glm::ivec3(160, 161, 167), glm::ivec3(160, 167, 237), glm::ivec3(160, 168, 169), glm::ivec3(160, 169, 214), glm::ivec3(160, 214, 254), glm::ivec3(160, 237, 168), glm::ivec3(161, 165, 238), glm::ivec3(161, 166, 167), glm::ivec3(161, 238, 166), glm::ivec3(161, 243, 165), glm::ivec3(162, 163, 164), glm::ivec3(162, 164, 165), glm::ivec3(162, 165, 243), glm::ivec3(163, 244, 164), glm::ivec3(169, 241, 257), glm::ivec3(169, 257, 214), glm::ivec3(170, 171, 213), glm::ivec3(170, 213, 257), glm::ivec3(170, 257, 241), glm::ivec3(171, 212, 213), glm::ivec3(171, 267, 212), glm::ivec3(172, 173, 210), glm::ivec3(172, 210, 211), glm::ivec3(172, 211, 267), glm::ivec3(173, 302, 210), glm::ivec3(174, 175, 183), glm::ivec3(174, 183, 184), glm::ivec3(174, 184, 185), glm::ivec3(174, 185, 318), glm::ivec3(175, 176, 182), glm::ivec3(175, 182, 183), glm::ivec3(176, 177, 181), glm::ivec3(176, 181, 182), glm::ivec3(177, 178, 180), glm::ivec3(177, 180, 181), glm::ivec3(177, 236, 178), glm::ivec3(178, 179, 180), glm::ivec3(179, 235, 180), glm::ivec3(183, 319, 184), glm::ivec3(186, 187, 200), glm::ivec3(186, 200, 201), glm::ivec3(186, 201, 228), glm::ivec3(187, 188, 189), glm::ivec3(187, 189, 200), glm::ivec3(187, 227, 188), glm::ivec3(189, 190, 200), glm::ivec3(190, 191, 198), glm::ivec3(190, 198, 199), glm::ivec3(190, 199, 200), glm::ivec3(191, 192, 197), glm::ivec3(191, 197, 198), glm::ivec3(192, 193, 194), glm::ivec3(192, 194, 197), glm::ivec3(193, 226, 194), glm::ivec3(194, 195, 197), glm::ivec3(195, 196, 197), glm::ivec3(195, 229, 196), glm::ivec3(202, 203, 208), glm::ivec3(202, 208, 209), glm::ivec3(202, 209, 314), glm::ivec3(203, 204, 208), glm::ivec3(203, 279, 204), glm::ivec3(204, 205, 207), glm::ivec3(204, 207, 208), glm::ivec3(205, 206, 207), glm::ivec3(205, 232, 206), glm::ivec3(210, 302, 290), glm::ivec3(211, 272, 267), glm::ivec3(212, 267, 272), glm::ivec3(214, 215, 254), glm::ivec3(218, 219, 296), glm::ivec3(222, 247, 256), glm::ivec3(223, 269, 281), glm::ivec3(224, 281, 269), glm::ivec3(239, 245, 246)
};
const int len = 307;


glm::vec4 rescale_vec4_1_255(const glm::vec4 &input_vec) {
    glm::vec4 clamped_value = glm::clamp(input_vec, 0.0f, 1.0f);
    glm::vec4 scaled_value  = clamped_value * 255.0f;
    return scaled_value;
}
bool same_side(glm::vec3 p1, glm::vec3 p2, glm::vec3 a, glm::vec3 b) {
    glm::vec3 cp1 = glm::cross(b - a, p1 - a);
    glm::vec3 cp2 = glm::cross(b - a, p2 - a);
    return glm::dot(cp1, cp2) >= 0.0f;
}
bool point_in_triangle(glm::vec3 p, glm::vec3 a, glm::vec3 b, glm::vec3 c) {
    return same_side(p, a, b, c) && same_side(p, b, a, c) && same_side(p, c, a, b);
}
bool is_in_path(glm::vec2 p) {
    for (int i = 0; i < len; i++) {
        glm::ivec3 triangle = triangles[i];
        glm::vec3 a = positions[triangle[0]];
        glm::vec3 b = positions[triangle[1]];
        glm::vec3 c = positions[triangle[2]];
        if (point_in_triangle(glm::vec3(p, 0.0f), a, b, c)) {
            return true;
        }
    }
    return false;
}
glm::vec3 paint_background(glm::vec2 uv) {
    glm::vec3 out_color(0.0f);
    float part_width = 0.33f;
    if (uv.x <= part_width) {
        out_color = MONGOLIAN_RED;
    }
    if ((uv.x > part_width) && (uv.x < part_width * 2.0f)) {
        out_color = MONGOLIAN_BLUE;
    }
    if (uv.x >= part_width * 2.0f) {
        out_color = MONGOLIAN_RED;
    }
    return out_color;
}
glm::vec3 paint_soyombo(glm::vec2 uv, float res_xdivy) {
    glm::vec3 out_color(0.0f);

    uv   *= 2.0f;
    uv   -= glm::vec2(1.0f);
    uv.x *= res_xdivy;
    uv.x *= 1.4f;
    uv.y *= 1.3f;

    float width  = (1.0*2.0-1.0)*res_xdivy*1.4;
    float height = (1.0*2.0-1.0)*res_xdivy*1.3;
    uv.x += width/1.5;
    uv.y -= height/25.0;

    if (is_in_path(uv)) {
        out_color = MONGOLIAN_YELLOW;
    }
    return out_color;
}

glm::vec4 fragment_shader(glm::vec2 u_uv, float u_time)
{
    glm::vec2 uv = u_uv/glm::vec2(CANVAS_WIDTH, CANVAS_HEIGHT);
    uv *= 1. + (.026f - .026f * glm::sin((uv.x + uv.y - u_time * .95f + glm::sin(1.5f * uv.x + 3.5f * uv.y) * PI * .2f) * PI * .7f));
    glm::vec3 out_color(0.0f);
    // Mongolian flag color computations
    out_color += paint_background(uv);
    out_color += paint_soyombo(uv, CANVAS_WIDTH/ static_cast<float>(CANVAS_HEIGHT));
    out_color += 0.225f; // some shade
    return rescale_vec4_1_255(glm::vec4(out_color, 1.0f));
};


int main()
{

    SDL_Window   *window   = nullptr;
    SDL_Renderer *renderer = nullptr;

    SDL_Init(SDL_INIT_VIDEO);
    SDL_CreateWindowAndRenderer(WINDOW_WIDTH, WINDOW_HEIGHT, 0, &window, &renderer);
    SDL_RenderSetScale(renderer, 1, 1);

    shs::Canvas *main_canvas     = new shs::Canvas(CANVAS_WIDTH, CANVAS_HEIGHT);
    SDL_Surface *main_sdlsurface = main_canvas->create_sdl_surface();
    SDL_Texture *screen_texture  = SDL_CreateTextureFromSurface(renderer, main_sdlsurface);


    bool exit = false;
    SDL_Event event_data;

    int    frame_delay            = 1000 / FRAMES_PER_SECOND; // Delay for 60 FPS
    float  frame_time_accumulator = 0;
    int    frame_counter          = 0;
    int    fps                    = 0;
    float  time_accumulator       = 0.0;

    while (!exit)
    {

        Uint32 frame_start_ticks = SDL_GetTicks();

        // catching up input events happened on hardware
        while (SDL_PollEvent(&event_data))
        {
            switch (event_data.type)
            {
            case SDL_QUIT:
                exit = true;
                break;
            case SDL_KEYDOWN:
                switch(event_data.key.keysym.sym) {
                    case SDLK_ESCAPE: 
                        exit = true;
                        break;
                }
                break;
            }
        }


        // preparing to render on SDL2
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);


        for (int x = 0; x < CANVAS_WIDTH; x++)
        {
            for (int y = 0; y < CANVAS_HEIGHT; y++)
            {
                glm::vec2 uv = {float(x), float(y)};
                glm::vec4 shader_output = fragment_shader(uv, time_accumulator);
                shs::Canvas::draw_pixel(*main_canvas, x, y, shs::Color{u_int8_t(shader_output[0]), u_int8_t(shader_output[1]), u_int8_t(shader_output[2]), u_int8_t(shader_output[3])});
            }
        }

        // debug draw for if it rendering something
        shs::Canvas::fill_random_pixel(*main_canvas, 40, 30, 60, 80);


        // actually prensenting canvas data on hardware surface
        shs::Canvas::flip_vertically(*main_canvas);
        shs::Canvas::copy_to_SDLSurface(main_sdlsurface, main_canvas);
        SDL_UpdateTexture(screen_texture, NULL, main_sdlsurface->pixels, main_sdlsurface->pitch);
        SDL_Rect destination_rect{0, 0, WINDOW_WIDTH, WINDOW_HEIGHT};
        SDL_RenderCopy(renderer, screen_texture, NULL, &destination_rect);
        SDL_RenderPresent(renderer);

    
        frame_counter++;
        Uint32 delta_frame_time  = SDL_GetTicks() - frame_start_ticks;
        frame_time_accumulator  += delta_frame_time/1000.0;
        time_accumulator        += delta_frame_time/1000.0;
        if (delta_frame_time < frame_delay) {
            SDL_Delay(frame_delay - delta_frame_time);
        }
        if (frame_time_accumulator >= 1.0) {
            std::string window_title = "FPS : "+std::to_string(frame_counter);
            frame_time_accumulator   = 0.0;
            frame_counter            = 0;
            SDL_SetWindowTitle(window, window_title.c_str());
        }
    }


    // free the memory
    main_canvas  = nullptr; 
    delete main_canvas;
    SDL_DestroyTexture(screen_texture);
    SDL_FreeSurface(main_sdlsurface);

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}